{"version":3,"sources":["services/GlobalFunctions.js","services/MoviesService.js","components/Buttons/DeleteButton.js","components/Buttons/EditButton.js","components/Card/Card.js","components/Navbar/Navbar.js","views/Home/Home.js","components/Form/Form.js","views/Add.js","views/Edit.js","views/Details/Details.js","views/Error.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalFunctions","formatDate","str","Date","toLocaleString","year","month","day","API_CALL","API_KEY","process","MoviesService","fetchMovies","id","filter","value","url","axios","get","response","data","errorHandler","add","movie","post","then","catch","remove","movieId","delete","update","put","fetchMovieData","searchValue","err","console","log","DeleteButton","title","navigate","useNavigate","location","useLocation","onClick","window","confirm","message","alert","pathname","reload","className","EditButton","to","Card","movieDate","release_date","src","poster","alt","description","class","Navbar","exact","isActive","Home","useState","myMovies","setMyMovies","errorMessage","setErrorMessage","inputRef","useRef","filterRef","displayAllMovies","myApiResult","useEffect","displayFilteredMovies","undefined","ref","onKeyDown","e","keyCode","target","current","type","placeholder","onChange","name","multiple","length","modules","Navigation","Pagination","spaceBetween","pagination","navigation","slidesPerView","breakpoints","width","map","slideContent","index","virtualIndex","TMDB_CALL","Form","props","formStep","setFormStep","TmdbSearchedMovie","setTmdbSearchedMovie","TmdbSearchId","setTmdbSearchId","checked","setChecked","categories","backdrop","actors","similar_movies","inputs","setInputs","handleChange","apiResult","results","onClickUl","poster_path","overview","backdrop_path","poster_url","genres","backdrop_url","fetchActors","fetchSimilar","requestFetchActors","requestFetchSimilar","all","spread","responses","responseFetchActors","cast","responseFetchSimilar","profile_path","character","photo","errors","error","previousFormStep","cur","backToFirstFormStep","onSubmit","preventDefault","onValidation","action","htmlFor","categorie","defaultChecked","pattern","size","actor","movies","Add","useParams","dataMovie","setDataMovie","updatedMovie","SwiperCore","use","Autoplay","cardData","setCardData","style","backgroundImage","centeredSlides","join","Error","App","path","element","Details","Edit","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAceA,EAdS,CAEpBC,WAFoB,SAETC,GAQP,OAFoB,IAAIC,KAAKD,GAAKE,eAAe,QALjC,CACZC,KAAM,UACNC,MAAM,OACNC,IAAI,c,kDCJVC,EAAW,wBAEXC,EAAO,mBAAeC,oCAEtBC,EAAgB,CAEZC,YAFY,SAEAC,EAAIC,EAAQC,GAAQ,OAAD,mHAC7BC,EAD6B,UACpBR,EADoB,gCAG7BK,EACAG,EAAG,UAAMR,EAAN,mBAAyBK,GAGvBC,GAAUC,IACfC,EAAG,UAAMR,EAAN,mBAAyBM,EAAzB,YAAmCC,IART,kBAYNE,IAClBC,IAAIF,GAboB,cAYvBG,EAZuB,yBActBA,EAASC,MAda,yDAiBtBC,EAAa,EAAD,KAjBU,4DAsBrCC,IAxBkB,SAwBdC,GACA,OAAON,IACFO,KADE,UACMhB,EADN,WACyBe,GAC3BE,MAAK,SAACN,GAAD,OAAcA,EAASC,QAC5BM,MAAML,IAIfM,OAhCkB,SAgCXC,GACH,OAAOX,IACFY,OADE,UACQrB,EADR,mBAC2BoB,IAC7BH,MAAK,SAACN,GAAD,OAAcA,EAASC,QAC5BM,MAAML,IAIfS,OAxCkB,SAwCXP,EAAOV,GACV,OAAOI,IACFc,IADE,UACKvB,EADL,mBACwBK,GAAMU,GAChCE,MAAK,SAACN,GAAD,OAAcA,EAASC,QAC5BM,MAAML,IAMTW,eAlDY,SAkDGnB,EAAIoB,GAAc,OAAD,mHAC9BjB,EAD8B,UArD3B,iCAyDHA,GADAH,EACG,gBAAaA,GAAb,OAAkBJ,GAIlB,sBAAmBA,EAAnB,kBAAoCwB,GART,kBAYPhB,IAClBC,IAAIF,GAbqB,cAYxBG,EAZwB,yBAcvBA,EAASC,MAdc,yDAgBvBC,EAAa,EAAD,KAhBW,6DAqBpCA,EAAe,SAACa,GAElB,OADAC,QAAQC,IAAIF,GACL,SAGIvB,I,cCvCA0B,EArCM,SAAC,GAAmB,IAAjBxB,EAAgB,EAAhBA,GAAIyB,EAAY,EAAZA,MACpBC,EAAWC,cACTC,EAAWC,cA0BjB,OACI,yBACIC,QAzBR,WACQC,OAAOC,QAAP,yCAAiDP,EAAjD,WACA3B,EAAcgB,OAAOd,GACpBY,MAAK,SAACN,GACH,IAAI2B,EAAU,4CAEG,UAAb3B,IACA2B,EAAU,yCAGdF,OAAOG,MAAMD,GAEa,MAAtBL,EAASO,SACTJ,OAAOH,SAASQ,SAIhBV,EAAS,SASjBW,UAAU,SAFd,UAGI,cAAC,IAAD,IAHJ,iB,QCtBOC,EATI,SAAC,GAAY,IAAVtC,EAAS,EAATA,GAClB,OACQ,eAAC,IAAD,CAAMqC,UAAU,SAASE,GAAI,CAAEJ,SAAS,SAAD,OAAWnC,IAAlD,UACI,cAAC,IAAD,IADJ,iBC8BGwC,EA9BF,SAAC,GAAc,IAAZjC,EAAW,EAAXA,KACNkC,EAAYlC,EAAKmC,aAEvB,OACI,yBAAQL,UAAU,yBAAlB,UACI,cAAC,IAAD,CAAME,GAAI,CAAEJ,SAAS,WAAD,OAAa5B,EAAKP,KAAtC,SACI,qBAAK2C,IAAKpC,EAAKqC,OAAQC,IAAI,iBAE/B,uCACI,cAAC,IAAD,CAAMN,GAAI,CAAEJ,SAAS,WAAD,OAAa5B,EAAKP,KAAtC,SACI,oBAAIqC,UAAU,cAAd,SAA6B9B,EAAKkB,UAEtC,gCACI,+BAEI,sBAAMY,UAAU,mBAAhB,SAAoClD,EAAgBC,WAAWqD,OAEnE,mBAAGJ,UAAU,mBAAb,SACK9B,EAAKuC,cAEV,sBAAKC,MAAM,eAAX,UACI,cAAC,EAAD,CAAY/C,GAAIO,EAAKP,KACrB,cAAC,EAAD,CAAcA,GAAIO,EAAKP,GAAIyB,MAAOlB,EAAKkB,qBCLhDuB,EAnBA,WACX,OACI,qBAAKX,UAAU,MAAMrC,GAAG,MAAxB,SACI,qBAAIqC,UAAU,UAAd,UACI,oBAAIA,UAAU,gBAAd,SACI,cAAC,IAAD,CAASY,MAAM,OAAOV,GAAG,IAAIF,UAAW,kBAAkB,YAAlB,EAAGa,SAAwC,aAAe,KAAlG,SACI,cAAC,IAAD,QAGR,6BACI,cAAC,IAAD,CAASD,MAAM,OAAOV,GAAG,OAAOF,UAAW,kBAAkB,YAAlB,EAAGa,SAAwC,aAAe,KAArG,SACI,cAAC,IAAD,c,eCsHTC,G,kBA3HF,WACT,MAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EAAWC,mBACXC,EAAYD,mBAGZE,EAAmB,WACrB9D,EAAcC,cACTa,MAAK,SAACiD,GACiB,KAAhBA,GACAP,EAAYO,MAGnBhD,OAAM,SAACQ,GAAD,OAASmC,EAAgB,4FAGxCM,qBAAU,WACNF,MACD,IAGH,IAAMG,EAAwB,SAAC9D,EAAQmB,GACf,KAAhBA,GACAtB,EAAcC,iBAAYiE,EAAW/D,EAAQmB,GACxCR,MAAK,SAACiD,GACHP,EAAYO,OA4B5B,OACI,sBAAKxB,UAAU,wBAAf,UACI,cAAC,EAAD,IACA,uBAAMA,UAAU,YAAhB,UACI,qBAAIA,UAAU,cAAd,UACI,6CACA,4CAGJ,sBAAKA,UAAU,eAAf,UAEI,uBAAOA,UAAU,mBAAmB4B,IAAKR,EAAUS,UAnBjD,SAACC,GACG,KAAdA,EAAEC,SACqB,KAAnBD,EAAEE,OAAOnE,OACT6D,EAAsBJ,EAAUW,QAAQpE,MAAOuD,EAASa,QAAQpE,QAgBaqE,KAAK,SAASC,YAAY,sCAAmCxE,GAAG,eACzI,yBAAQiE,IAAKN,EAAWc,SAlCjB,SAACN,GACpBR,EAAUW,QAAQpE,MAAQiE,EAAEE,OAAOnE,MAEH,SAA5ByD,EAAUW,QAAQpE,OAAgD,KAA5ByD,EAAUW,QAAQpE,MACxD0D,IAI+B,KAA3BH,EAASa,QAAQpE,OACjB6D,EAAsBJ,EAAUW,QAAQpE,MAAOuD,EAASa,QAAQpE,QAyBVwE,KAAK,SAAS1E,GAAG,gBAAgBqC,UAAU,uBAAuBsC,UAAQ,EAA5H,UACI,wBAAQzE,MAAM,OAAd,kBACA,wBAAQA,MAAM,aAAd,mBACA,wBAAQA,MAAM,oBAAd,4BACA,wBAAQA,MAAM,kBAAd,iCAIR,gCAEKqD,GAAgB,qBAAKlB,UAAU,QAAf,SAAwBkB,IACxCF,GACG,8BAE4B,IAApBA,EAASuB,QACT,qBAAKvC,UAAU,kBAAf,SACI,oBAAIU,MAAM,eAAV,4EAKfM,GACG,cAAC,IAAD,CACIhB,UAAU,0BACVwC,QAAS,CAACC,IAAYC,KACtBC,aAAc,GACdC,WAAY,CACR,WAAa,GAEjBC,YAAY,EACZC,cAAe,EACfC,YAAa,CACT,IAAK,CACDC,MAAO,IACPF,cAAe,GAEnB,KAAM,CACFE,MAAO,KACPF,cAAe,IAhB3B,SAoBkB,IAAb9B,GACGA,EAASiC,KAAI,SAAC/E,EAAMgF,EAAcC,GAArB,OACT,cAAC,IAAD,CAAgCC,aAAcD,EAA9C,SACI,cAAC,EAAD,CAAoBxF,GAAIO,EAAKP,GAAIO,KAAMA,GAA5BA,EAAKP,KADFuF,mB,eChHhDG,EAAS,gCACT9F,EAAO,mBAAeC,oCA6Xb8F,EA3XF,SAACC,GAEV,MAAgCxC,mBAAS,GAAzC,mBAAOyC,EAAP,KAAiBC,EAAjB,KACA,EAAkD1C,mBAAS,MAA3D,mBAAO2C,EAAP,KAA0BC,EAA1B,KACA,EAAwC5C,mBAAS,MAAjD,mBAAO6C,EAAP,KAAqBC,EAArB,KACA,EAA8B9C,oBAAS,GAAvC,mBAAO+C,EAAP,KAAgBC,EAAhB,KACA,EAA4BhD,mBAAS,CACjC3B,MAAO,GACPiB,aAAc,GACdI,YAAa,GACbuD,WAAY,GACZzD,OAAQ,GACR0D,SAAU,GACVC,OAAQ,GACRC,eAAgB,KARpB,mBAAOC,EAAP,KAAeC,EAAf,KAWMC,EAAe,SAACxC,GAClBuC,EAAU,2BACHD,GADE,kBAEJtC,EAAEE,OAAOK,KAAOP,EAAEE,OAAOnE,SAE9B,IAAIkB,EAAc+C,EAAEE,OAAOnE,MACP,KAAhBkB,GACAtB,EAAcqB,oBAAe6C,EAAW5C,GACnCR,MAAK,SAACgG,GACHZ,EAAqBY,EAAUC,aAKzCC,EAAY,SAAC3C,GACf6B,EAAqB,MACrBE,EAAgB/B,EAAEE,OAAOrE,KAG7B8D,qBAAU,WACN,GAAImC,EACA,GAAiB,IAAbJ,EACA/F,EAAcqB,eAAe8E,GACxBrF,MAAK,SAACgG,GACH,IAAQnF,EAAsEmF,EAAtEnF,MAAOiB,EAA+DkE,EAA/DlE,aAAwBqE,GAAuCH,EAAjDI,SAAiDJ,EAAvCG,aAAaE,EAA0BL,EAA1BK,cAChDC,GAD0EN,EAAXO,OAClD,IACbC,EAAe,GAEfL,IACAG,EAAU,6CAAyCH,IAGnDE,IACAG,EAAY,6CAAyCH,IAGzD,IAAMZ,EAAaO,EAAUO,OAAO7B,KAAI,qBAAGZ,QAE3CgC,EAAU,2BACHD,GADE,IAELhF,QACAiB,eACAI,YAAa8D,EAAUI,SACvBX,aACAC,SAAUc,EACVxE,OAAQsE,YAGjB,CACH,IAAIG,EAAW,UAAM3B,EAAN,iBAAwBO,EAAxB,iBAA6CrG,GACxD0H,EAAY,UAAM5B,EAAN,iBAAwBO,EAAxB,mBAA+CrG,GAEzD2H,EAAqBnH,IAAMC,IAAIgH,GAC/BG,EAAsBpH,IAAMC,IAAIiH,GAEtClH,IACKqH,IAAI,CAACF,EAAoBC,IACzB5G,KACGR,IAAMsH,QAAO,WAAmB,IAAD,uBAAdC,EAAc,yBAAdA,EAAc,gBAC3B,IAAMC,EAAsBD,EAAU,GAAGpH,KAAKsH,KACxCC,EAAuBH,EAAU,GAAGpH,KAAKsG,QAGzCN,EAASqB,EAAoBtC,KAC/B,gBAAGyC,EAAH,EAAGA,aAAcrD,EAAjB,EAAiBA,KAAMsD,EAAvB,EAAuBA,UAAvB,MACI,CAAEC,MAAM,sCAAD,OAAwCF,GAAgBrD,OAAMsD,gBAGvExB,EAAiBsB,EAAqBxC,KACxC,gBAAGyB,EAAH,EAAGA,YAAatF,EAAhB,EAAgBA,MAAOiB,EAAvB,EAAuBA,aAAvB,MACI,CAAEE,OAAO,sCAAD,OAAwCmE,GAAetF,QAAOiB,mBAG9EgE,EAAU,2BACHD,GADE,IAELF,SACAC,wBAKX3F,OAAM,SAAAqH,GAEH5G,QAAQ6G,MAAMD,SAM/B,CAACjC,EAAcJ,IAGlB,IAAMuC,EAAmB,WACrBtC,GAAY,SAACuC,GAAD,OAASA,EAAM,MAOzBC,EAAsB,WACxBvG,OAAOH,SAASQ,UAkCpB0B,qBAAU,WACF8B,EAAMlF,OACNgG,EAAU,CACNjF,MAAOmE,EAAMlF,MAAMe,MACnBiB,aAAckD,EAAMlF,MAAMgC,aAC1BI,YAAa8C,EAAMlF,MAAMoC,YACzBuD,WAAYT,EAAMlF,MAAM2F,WACxBzD,OAAQgD,EAAMlF,MAAMkC,OACpB0D,SAAUV,EAAMlF,MAAM4F,SACtBC,OAAQX,EAAMlF,MAAM6F,OACpBC,eAAgBZ,EAAMlF,MAAM8F,mBAIrC,CAACZ,EAAMlF,QAsBV,OACI,8BACI,uBAAM6H,SAnBd,SAAkBpE,GACdA,EAAEqE,iBA1DF1C,GAAY,SAACuC,GAAD,OAASA,EAAM,KA4DvBxC,EAAW,IAAM,GACjBD,EAAM6C,aAAahC,IAeOiC,OAAO,IAAIrG,UAAU,OAA/C,UACKwD,EApMC,GAqME,sBAAK9C,MAAM,aAAX,UApEK,IAAb8C,EAEI,wBACIxD,UAAU,iBACVP,QAASsG,EACT7D,KAAK,SAHT,SAKI,cAAC,IAAD,WAIR,EA2DY,uBAAMlC,UAAU,cAAhB,cAAgCwD,EAAW,EAA3C,QAvMN,QA4MDA,GAAY,GACT,0BAASxD,UAAwB,IAAbwD,EAAiB,QAAU,SAA/C,UACI,qBAAKxD,UAAU,eAAf,qCAIA,sBAAKU,MAAM,eAAX,UACI,uBAAOV,UAAU,cAAcsG,QAAQ,QAAvC,mBACA,uBACIpE,KAAK,OACLvE,GAAG,WACH0E,KAAK,QACLF,YAAY,QACZC,SAAUkC,EACVzG,MAAOuG,EAAOhF,QAGjBsE,GAAkD,IAA7BA,EAAkBnB,QACpC,6BACKmB,EAAkBT,KAAI,SAAC5E,GAAD,OACnB,oBAAmBV,GAAIU,EAAMV,GAAI8B,QAASgF,EAA1C,SACKpG,EAAMe,OADFf,EAAMV,YAQ/B,gCACI,uBAAOqC,UAAU,cAAcsG,QAAQ,OAAvC,4BACA,uBACIpE,KAAK,OACLvE,GAAG,OACH0E,KAAK,eACLF,YAAY,aACZC,SAAUkC,EACVzG,MAAOuG,EAAO/D,qBAO7BmD,GAAY,GACT,0BAASxD,UAAwB,IAAbwD,EAAiB,QAAU,SAA/C,UACI,oBAAIxD,UAAU,eAAd,mCAEA,gCACI,uBAAOA,UAAU,6BAAuCsG,QAAQ,aAAhE,0BAAkD,OACjDlC,GACGA,EAAOJ,WAAWf,KAAI,SAACsD,EAAW5I,GAAZ,OAClB,kCACI,uBACI0E,KAAK,aACLH,KAAK,WACLrE,MAAO0I,EACPC,eAAgB1C,EAChB1B,SAAU,kBAAM2B,GAAYD,MAE/ByC,IARO5I,SAexB,gCACI,uBAAOqC,UAAU,cAAcsG,QAAQ,cAAvC,yBACA,0BACIpE,KAAK,WACLvE,GAAG,cACH0E,KAAK,cACLD,SAAUkC,EACVzG,MAAOuG,EAAO3D,iBAMtB,gCACI,uBAAOT,UAAU,cAAcsG,QAAQ,SAAvC,2BACA,uBACIpE,KAAK,MACLG,KAAK,SACL1E,GAAG,SACHwE,YAAY,sBACZsE,QAAQ,aACRrE,SAAUkC,EACVzG,MAAOuG,EAAO7D,YAKtB,gCACI,uBAAOP,UAAU,cAAcsG,QAAQ,WAAvC,uCACA,uBACIpE,KAAK,MACLG,KAAK,WACL1E,GAAG,WACHwE,YAAY,sBACZsE,QAAQ,aACRC,KAAK,KACLtE,SAAUkC,EACVzG,MAAOuG,EAAOH,cAKlB,gCACI,uBAAOjE,UAAU,cAAcsG,QAAQ,SAAvC,gCACClC,EAAOF,QAAmC,IAAzBE,EAAOF,OAAO3B,QAC5B,qBAAKvC,UAAU,eAAf,SACKoE,EAAOF,OAAOjB,KAAI,SAACiB,EAAQf,GAAT,OACf,gCACI,qBAAK7C,IAAK4D,EAAO0B,MAAOpF,IAAG,UAAK0D,EAAO7B,QACvC,6BAAK6B,EAAO7B,OACZ,6BAAK6B,EAAOyB,YACZ,wBAAQzD,KAAK,SAASzC,QAAS,WAC3B4E,EAAU,2BACHD,GADE,IAELF,OAAQE,EAAOF,OAAOtG,QAAO,SAAA+I,GAAK,OAAIA,EAAMtE,OAAS6B,EAAO7B,YAHpE,sBAJMc,WAoB1B,gCACI,uBAAOnD,UAAU,cAAcsG,QAAQ,UAAvC,oCACClC,EAAOD,gBAAmD,IAAjCC,EAAOD,eAAe5B,QAC5C,qBAAKvC,UAAU,eAAf,SACKoE,EAAOD,eAAelB,KAAI,SAAC2D,EAAQzD,GAAT,OACvB,gCAEI,qBAAK7C,IAAKsG,EAAOrG,OAAQC,IAAG,UAAKoG,EAAOxH,OAAS4D,MAAO,MACxD,6BAAK4D,EAAOxH,QACZ,6BAAKwH,EAAOvG,eAEZ,wBAAQ6B,KAAK,SAASzC,QAAS,WAC3B4E,EAAU,2BACHD,GADE,IAELD,eAAgBC,EAAOD,eAAevG,QAAO,SAAAS,GAAK,OAAIA,EAAMe,QAAUwH,EAAOxH,aAHrF,sBANM+D,cAwBxB,IAAbK,EACG,kCACI,sBAAKxD,UAAU,gBAAf,UACA,+CACA,yFA/NZ,yBACIP,QAASwG,EACT/D,KAAK,SAFT,UAII,cAAC,IAAD,IAJJ,sBAwCA,eAAC,IAAD,CAAMlC,UAAU,SAASE,GAAI,CAAEJ,SAAU,KAAzC,UACI,cAAC,IAAD,IADJ,oCA6LU,yBAAQE,UAAU,gBAAgBkC,KAAK,SAAvC,cAAkDsB,EAAW,UAAY,sBCjWhFqD,EAxBH,WACR,MAAwC9F,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAQA,OACI,sBAAKnB,UAAU,mBAAf,UACI,cAAC,EAAD,IAEA,qBAAIA,UAAU,cAAd,UACI,8CACA,2CAGHkB,GAAgB,qBAAKlB,UAAU,QAAf,SAAwBkB,IACzC,cAAC,EAAD,CAAMkF,aAhBd,SAAkBlI,GAEdT,EAAcW,IAAIF,GACjBM,OAAM,SAACQ,GAAD,OAASmC,EAAgBnC,EAAIY,mBC6B7BkB,EAlCF,WACT,IAAQnD,EAAOmJ,cAAPnJ,GACR,EAAkCoD,qBAAlC,mBAAOgG,EAAP,KAAkBC,EAAlB,KACA,EAAwCjG,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAaA,OAXAM,qBAAU,WACNhE,EAAcC,YAAYC,GAAIY,MAAK,SAACgG,GAAD,OAAeyC,EAAazC,QAChE,CAAC5G,IAUA,sBAAKqC,UAAU,mBAAf,UACI,cAAC,EAAD,IACCkB,GAAgB,qBAAKlB,UAAU,QAAf,SAAwBkB,IACxC6F,GACG,sBAAK/G,UAAU,YAAf,UACI,qBAAIA,UAAU,cAAd,UACI,4CAAS+G,EAAU3H,MAAnB,cACA,+CAGJ,cAAC,EAAD,CAAMgH,aAlBtB,SAAqBa,GACjBxJ,EAAcmB,OAAOqI,EAActJ,GAC9Ba,OAAM,SAACQ,GAAD,OAASmC,EAAgBnC,EAAIY,aAgBKvB,MAAO0I,WCyF7CjG,EA5GF,WACT,IAAQnD,EAAOmJ,cAAPnJ,GACRuJ,IAAWC,IAAI,CAACC,MAEhB,MAAgCrG,mBAAS,MAAzC,mBAAOsG,EAAP,KAAiBC,EAAjB,KAYA,OAVA7F,qBAAU,WACF9D,GACAF,EAAcC,YAAYC,GACrBY,MAAK,SAACgG,GACH+C,EAAY/C,QAIzB,IAGC,8BACK8C,GACG,sBAAKrH,UAAU,2BAAf,UACI,qBAAKA,UAAU,aAAauH,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAASpD,SAAlB,QACpD,sBAAKjE,UAAU,oBAAf,UACI,cAAC,EAAD,IACA,sBAAKU,MAAM,eAAX,UACI,oBAAIV,UAAU,cAAd,SAA6BqH,EAASjI,QAEtC,sBAAKsB,MAAM,kBAAX,UACI,cAAC,EAAD,CAAqB/C,GAAIA,GAARA,GACjB,cAAC,EAAD,CAAcA,GAAI0J,EAAS1J,GAAIyB,MAAOiI,EAASjI,WAGnD,sBAAKY,UAAU,kBAAf,UACI,qBAAKA,UAAU,uBAAuBuH,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAASpD,SAAlB,QAC9D,eAAC,IAAD,CACIjE,UAAU,2BACVwC,QAAS,CAACC,IAAYC,KACtB+E,gBAAgB,EAChB7E,WAAY,CACR,WAAa,GAEjBC,YAAY,EAKZC,cAAe,EAZnB,UAeI,cAAC,IAAD,UACI,sBAAK9C,UAAU,mDAAf,UACI,8BACI,qBAAKM,IAAK+G,EAAS9G,OAAQC,IAAI,iBAEnC,gCACI,qBAAKR,UAAU,eAAf,SACKlD,EAAgBC,WAAhB,UAA8BsK,EAAShH,iBAE5C,qBAAKL,UAAU,cAAf,SACKqH,EAASrD,WAAW0D,KAAK,QAE9B,qBAAK1H,UAAU,+BAAf,SACKqH,EAAS5G,sBAO1B,cAAC,IAAD,UACI,qBAAKT,UAAU,yBAAf,SACKqH,EAASnD,OAAOjB,KAAI,SAACiB,EAAQvG,GAAT,OACjB,gCACI,qBAAK2C,IAAK4D,EAAO0B,MAAOpF,IAAK0D,EAAO7B,OACpC,+BAAgB6B,EAAO7B,MAAZ1E,GACX,sBAAe+C,MAAM,cAArB,SAAoCwD,EAAOyB,WAAhChI,aAQ3B,cAAC,IAAD,UACI,qBAAKqC,UAAU,2BAAf,SACI,gCACI,qBAAKA,UAAU,eAAf,mCAIA,qBAAKA,UAAU,gCAAf,SACKqH,EAASlD,eAAelB,KAAI,SAAC5E,EAAOV,GAAR,OACzB,4BAAaU,EAAMe,OAAXzB,iCC1FjDgK,EAZD,WACV,OACI,sBAAK3H,UAAU,mBAAf,UACI,cAAC,EAAD,IACA,qBAAIA,UAAU,cAAd,UACI,uCACA,iDCeD4H,MAhBf,WACE,OACI,8BACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,EAAD,MAC5B,cAAC,IAAD,CAAOD,KAAK,cAAcC,QAAS,cAACC,EAAD,MACnC,cAAC,IAAD,CAAOF,KAAK,YAAYC,QAAS,cAACE,EAAD,MACjC,cAAC,IAAD,CAAOC,UAAWN,YCLfO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7J,MAAK,YAAkD,IAA/C8J,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.487b9538.chunk.js","sourcesContent":["const GlobalFunctions = {\n\n    formatDate(str){\n        const options = {\n            year: \"numeric\",\n            month:\"long\",\n            day:\"numeric\"\n        };\n        const dateAndHour = new Date(str).toLocaleString('fr-FR', options);\n\n        return dateAndHour;\n    }\n};\n\nexport default GlobalFunctions;","import axios from 'axios';\n\nconst API_CALL = 'http://localhost:3000';\nconst TMDB_CALL = `https://api.themoviedb.org/3/`;\nconst API_KEY = `?api_key=${process.env.REACT_APP_TMDB_API_KEY}`;\n\nconst MoviesService = {\n    // PRIVATE API\n    async fetchMovies(id, filter, value) {\n        let url = `${API_CALL}/movies?_sort=id&_order=desc`;\n\n        if (id) {\n            url = `${API_CALL}/movies/${id}`;\n        }\n\n        else if (filter && value) {\n            url = `${API_CALL}/movies?${filter}=${value}`;\n        }\n\n        try {\n            const response = await axios\n                .get(url);\n            return response.data;\n\n        } catch (err) {\n            return errorHandler(err);\n        }\n    },\n\n    // add a movie\n    add(movie) {\n        return axios\n            .post(`${API_CALL}/movies`, movie)\n            .then((response) => response.data)\n            .catch(errorHandler);\n    },\n\n    // delete via ID\n    remove(movieId) {\n        return axios\n            .delete(`${API_CALL}/movies/${movieId}`)\n            .then((response) => response.data)\n            .catch(errorHandler);\n    },\n\n    // edit a movie\n    update(movie, id) {\n        return axios\n            .put(`${API_CALL}/movies/${id}`, movie)\n            .then((response) => response.data)\n            .catch(errorHandler);\n    },\n\n\n\n    // THE MOVIE DATABASE\n    async fetchMovieData(id, searchValue) {\n        let url = `${TMDB_CALL}`;\n\n        if (id) {\n            url += `movie/${id}${API_KEY}`;\n        }\n\n        else {\n            url += `search/movie${API_KEY}&query=${searchValue}`;\n        }\n\n        try {\n            const response = await axios\n                .get(url);\n            return response.data;\n        } catch (err) {\n            return errorHandler(err);\n        }\n    }\n}\n\nconst errorHandler = (err) => {\n    console.log(err);\n    return \"error\";\n};\n\nexport default MoviesService;","import React from 'react';\nimport { GrClose } from 'react-icons/gr';\nimport MoviesService from '../../services/MoviesService';\nimport { useLocation, useNavigate } from 'react-router';\n\n\nconst DeleteButton = ({ id, title }) => {\n    let navigate = useNavigate();\n    const location = useLocation();\n\n    // delete card\n    function onClickDelete() {\n        if (window.confirm(`Voulez-vous vraiment supprimer ${title} ?`)) {\n            MoviesService.remove(id)\n            .then((response) => {\n                let message = 'Le film a bien été supprimé !';\n\n                if (response === \"error\") {\n                    message = \"Oops, une erreur s'est produite…\"\n                }\n\n                window.alert(message);\n\n                if (location.pathname === '/') {\n                    window.location.reload();\n                }\n                \n                else {\n                    navigate('/');\n                }\n            })\n        }\n    }\n\n    return (\n        <button\n            onClick={onClickDelete}\n            className=\"button\">\n            <GrClose /> Supprimer\n        </button>\n    );\n};\n\nexport default DeleteButton;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { MdMovieFilter } from 'react-icons/md';\n\nconst EditButton = ({ id }) => {\n    return (\n            <Link className=\"button\" to={{ pathname: `/edit/${id}` }}>\n                <MdMovieFilter /> Éditer\n            </Link>\n        \n    );\n};\n\nexport default EditButton;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport GlobalFunctions from '../../services/GlobalFunctions';\nimport DeleteButton from '../Buttons/DeleteButton';\nimport EditButton from '../Buttons/EditButton';\n\nconst Card = ({ data }) => {\n    const movieDate = data.release_date;\n\n    return (\n        <figure className=\"card smooth-apparition\">\n            <Link to={{ pathname: `/movies/${data.id}` }}>\n                <img src={data.poster} alt=\"Couverture\" />\n            </Link>\n            <figcaption>\n                <Link to={{ pathname: `/movies/${data.id}` }}>\n                    <h3 className=\"title-small\">{data.title}</h3>\n                </Link>\n                <div>\n                    <span>\n                        {/* <LikeButton id={id} /> */}\n                        <span className=\"title-small date\">{GlobalFunctions.formatDate(movieDate)}</span>\n                    </span>\n                    <p className=\"card-description\">\n                        {data.description}\n                    </p>\n                    <div class=\"card-buttons\">\n                        <EditButton id={data.id} />\n                        <DeleteButton id={data.id} title={data.title} />\n                    </div>\n                </div>\n            </figcaption>\n        </figure>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport { GrHome, GrFormSearch } from 'react-icons/gr';\nimport { NavLink } from 'react-router-dom';\n\nconst Navbar = () => {\n    return (\n        <nav className=\"nav\" id=\"nav\">\n            <ul className=\"nav-bar\">\n                <li className=\"nav-bar__home\">\n                    <NavLink exact=\"true\" to=\"/\" className={({ isActive }) => \"nav-link\" + (isActive ? \" activated\" : \"\")}>\n                        <GrHome />\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink exact=\"true\" to=\"/add\" className={({ isActive }) => \"nav-link\" + (isActive ? \" activated\" : \"\")}>\n                        <GrFormSearch />\n                    </NavLink>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default Navbar;","import React, { useEffect, useRef, useState } from 'react';\nimport Card from '../../components/Card/Card';\nimport Navbar from '../../components/Navbar/Navbar';\nimport { Swiper, SwiperSlide } from 'swiper/react/swiper-react.js';\nimport { Navigation, Pagination } from 'swiper';\nimport 'swiper/swiper.scss';\nimport 'swiper/modules/navigation/navigation.scss';\nimport 'swiper/modules/pagination/pagination.scss';\nimport MoviesService from '../../services/MoviesService';\n\nconst Home = () => {\n    const [myMovies, setMyMovies] = useState(null);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const inputRef = useRef();\n    const filterRef = useRef();\n\n    //function : fetch all movies\n    const displayAllMovies = () => {\n        MoviesService.fetchMovies()\n            .then((myApiResult) => {\n                if (myApiResult !== \"\") {\n                    setMyMovies(myApiResult);\n                }\n            })\n            .catch((err) => setErrorMessage('Erreur serveur : Impossible de récupérer les films de la bibliothèque…'));\n    }\n    //display all movies by default\n    useEffect(() => {\n        displayAllMovies();\n    }, []);\n\n    //function : fetch by filter\n    const displayFilteredMovies = (filter, searchValue) => {\n        if (searchValue !== \"\") {\n            MoviesService.fetchMovies(undefined, filter, searchValue)\n                .then((myApiResult) => {\n                    setMyMovies(myApiResult);\n                });\n        }\n    };\n\n    //select a filter method\n    const filteredSearch = (e) => {\n        filterRef.current.value = e.target.value;\n\n        if (filterRef.current.value === \"tout\" || filterRef.current.value === \"\") {\n            displayAllMovies();\n        }\n\n        else {\n            if (inputRef.current.value !== \"\") {\n                displayFilteredMovies(filterRef.current.value, inputRef.current.value)\n            }\n        }\n    }\n\n    const onKeyDown = (e) => {\n        if (e.keyCode === 13) {\n            if (e.target.value !== \"\") {\n                displayFilteredMovies(filterRef.current.value, inputRef.current.value)\n            }\n        }\n    }\n\n    return (\n        <div className=\"home pages-background\">\n            <Navbar />\n            <main className=\"home-main\">\n                <h1 className=\"title-large\">\n                    <span>My movies</span>\n                    <span>board</span>\n                </h1>\n\n                <div className=\"home__search\">\n                    {/* <h2 class=\"title-medium\">Consulter par filtres :</h2> */}\n                    <input className=\"home__search-bar\" ref={inputRef} onKeyDown={onKeyDown} type=\"search\" placeholder=\"Titre, date de sortie, catégorie\" id=\"search-bar\" />\n                    <select ref={filterRef} onChange={filteredSearch} name=\"filter\" id=\"filter-select\" className=\"home__search--select\" multiple>\n                        <option value=\"tout\">Tout</option>\n                        <option value=\"title_like\">Titre</option>\n                        <option value=\"release_date_like\">Date de sortie</option>\n                        <option value=\"categories_like\">Catégories</option>\n                    </select>\n                </div>\n\n                <div>\n                    {/* GÉRER CAS D'ERREUR SERVEUR : ne fonctionne pas pour l'instant */}\n                    {errorMessage && <div className='error'>{errorMessage}</div>}\n                    {myMovies && (\n                        <div>\n                            {\n                                myMovies.length === 0 &&\n                                <div className=\"home__no-result\">\n                                    <h2 class=\"title-medium\">Ce film n'est pas présent dans la bibliothèque…</h2>\n                                </div>\n                            }\n                        </div>\n                    )}\n                    {myMovies && (\n                        <Swiper\n                            className=\"home__horizontal-scroll\"\n                            modules={[Navigation, Pagination]}\n                            spaceBetween={10}\n                            pagination={{\n                                \"clickable\": true\n                            }}\n                            navigation={true}\n                            slidesPerView={1}\n                            breakpoints={{\n                                768: {\n                                    width: 768,\n                                    slidesPerView: 2,\n                                },\n                                1024: {\n                                    width: 1024,\n                                    slidesPerView: 3,\n                                },\n                            }}\n                        >\n                            {myMovies !== 0 &&\n                                myMovies.map((data, slideContent, index) => (\n                                    <SwiperSlide key={slideContent} virtualIndex={index}>\n                                        <Card key={data.id} id={data.id} data={data} />\n                                    </SwiperSlide>\n                                ))\n                            }\n                        </Swiper>\n                    )}\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default Home;","import React, { useEffect, useState } from 'react';\nimport { GrAddCircle, GrHome, GrPrevious } from \"react-icons/gr\";\nimport MoviesService from '../../services/MoviesService';\nimport axios from \"axios\";\nimport { Link } from 'react-router-dom';\n\nconst MAX_STEPS = 2;\n\nconst TMDB_CALL = `https://api.themoviedb.org/3/`;\nconst API_KEY = `?api_key=${process.env.REACT_APP_TMDB_API_KEY}`;\n\nconst Form = (props) => {\n    // FORM VARIABLES\n    const [formStep, setFormStep] = useState(0);\n    const [TmdbSearchedMovie, setTmdbSearchedMovie] = useState(null);\n    const [TmdbSearchId, setTmdbSearchId] = useState(null);\n    const [checked, setChecked] = useState(true);\n    const [inputs, setInputs] = useState({\n        title: \"\",\n        release_date: \"\",\n        description: \"\",\n        categories: [],\n        poster: \"\",\n        backdrop: \"\",\n        actors: [],\n        similar_movies: []\n    })\n\n    const handleChange = (e) => {\n        setInputs({\n            ...inputs,\n            [e.target.name]: e.target.value\n        })\n        let searchValue = e.target.value;\n        if (searchValue !== '') {\n            MoviesService.fetchMovieData(undefined, searchValue)\n                .then((apiResult) => {\n                    setTmdbSearchedMovie(apiResult.results);\n                });\n        }\n    }\n\n    const onClickUl = (e) => {\n        setTmdbSearchedMovie(null);\n        setTmdbSearchId(e.target.id);\n    }\n\n    useEffect(() => {\n        if (TmdbSearchId) {\n            if (formStep === 0) {\n                MoviesService.fetchMovieData(TmdbSearchId)\n                    .then((apiResult) => {\n                        const { title, release_date, overview, poster_path, backdrop_path, genres } = apiResult\n                        let poster_url = \"\";\n                        let backdrop_url = \"\";\n\n                        if (poster_path) {\n                            poster_url = `https://image.tmdb.org/t/p/original${poster_path}`;\n                        }\n\n                        if (backdrop_path) {\n                            backdrop_url = `https://image.tmdb.org/t/p/original${backdrop_path}`;\n                        }\n\n                        const categories = apiResult.genres.map(({ name }) => name);\n\n                        setInputs({\n                            ...inputs,\n                            title,\n                            release_date,\n                            description: apiResult.overview,\n                            categories,\n                            backdrop: backdrop_url,\n                            poster: poster_url,\n                        })\n                    });\n            } else {\n                let fetchActors = `${TMDB_CALL}movie/${TmdbSearchId}/casts${API_KEY}`;\n                let fetchSimilar = `${TMDB_CALL}movie/${TmdbSearchId}/similar${API_KEY}`;\n\n                const requestFetchActors = axios.get(fetchActors);\n                const requestFetchSimilar = axios.get(fetchSimilar);\n\n                axios\n                    .all([requestFetchActors, requestFetchSimilar])\n                    .then(\n                        axios.spread((...responses) => {\n                            const responseFetchActors = responses[0].data.cast;\n                            const responseFetchSimilar = responses[1].data.results;\n\n                            // use/access the results\n                            const actors = responseFetchActors.map(\n                                ({ profile_path, name, character }) => (\n                                    { photo: `https://image.tmdb.org/t/p/original${profile_path}`, name, character }\n                                ));\n\n                            const similar_movies = responseFetchSimilar.map(\n                                ({ poster_path, title, release_date }) => (\n                                    { poster: `https://image.tmdb.org/t/p/original${poster_path}`, title, release_date }\n                                ));\n\n                            setInputs({\n                                ...inputs,\n                                actors,\n                                similar_movies,\n                            })\n\n                        })\n                    )\n                    .catch(errors => {\n                        // react on errors.\n                        console.error(errors);\n                    });\n            }\n\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [TmdbSearchId, formStep]);\n\n    // FORM STEPS\n    const previousFormStep = () => {\n        setFormStep((cur) => cur - 1);\n    };\n\n    const completeFormStep = () => {\n        setFormStep((cur) => cur + 1);\n    };\n\n    const backToFirstFormStep = () => {\n        window.location.reload();\n    };\n\n    // FORM BUTTONS\n    // prev\n    const renderPrevButton = () => {\n        if (formStep === 1) {\n            return (\n                <button\n                    className=\"form__previous\"\n                    onClick={previousFormStep}\n                    type=\"button\"\n                >\n                    <GrPrevious />\n                </button>\n            );\n        } else {\n            return undefined;\n        }\n    };\n\n    // add a new movie\n    const newMovieButton = () => {\n        return (\n            <button\n                onClick={backToFirstFormStep}\n                type=\"button\"\n            >\n                <GrAddCircle /> Ajouter un film\n            </button>\n        )\n    }\n\n    // EDIT FORM : pre-fill\n    useEffect(() => {\n        if (props.movie) {\n            setInputs({\n                title: props.movie.title,\n                release_date: props.movie.release_date,\n                description: props.movie.description,\n                categories: props.movie.categories,\n                poster: props.movie.poster,\n                backdrop: props.movie.backdrop,\n                actors: props.movie.actors,\n                similar_movies: props.movie.similar_movies,\n            })\n\n        }\n    }, [props.movie]);\n\n\n    // FORM FUNCTIONS\n    // submit\n    function onSubmit(e) {\n        e.preventDefault();\n        completeFormStep();\n        if (formStep + 1 === 2) {\n            props.onValidation(inputs);\n        }\n    }\n\n    // go back to Homepage\n    const backToHome = () => {\n        return (\n            <Link className=\"button\" to={{ pathname: \"/\" }}>\n                <GrHome /> Retourner à l'accueil\n            </Link>\n        )\n    }\n\n    return (\n        <div>\n            <form onSubmit={onSubmit} action=\"#\" className=\"form\">\n                {formStep < MAX_STEPS && (\n                    <div class=\"form__step\">\n                        {renderPrevButton()}\n                        <span className=\"title-small\"> {formStep + 1} sur {MAX_STEPS}</span>\n                    </div>\n                )}\n\n                {/* first step */}\n                {formStep >= 0 && (\n                    <section className={formStep === 0 ? \"block\" : \"hidden\"}>\n                        <div className=\"title-medium\">\n                            Sélectionner un film\n                        </div>\n                        {/* title */}\n                        <div class=\"form__select\">\n                            <label className=\"title-small\" htmlFor=\"title\">Titre</label>\n                            <input\n                                type=\"text\"\n                                id=\"title-id\"\n                                name=\"title\"\n                                placeholder=\"Titre\"\n                                onChange={handleChange}\n                                value={inputs.title}\n                            />\n\n                            {TmdbSearchedMovie && TmdbSearchedMovie.length !== 0 && (\n                                <ul>\n                                    {TmdbSearchedMovie.map((movie) =>\n                                        <li key={movie.id} id={movie.id} onClick={onClickUl}>\n                                            {movie.title}\n                                        </li>\n                                    )}\n                                </ul>\n                            )}\n                        </div>\n\n                        <div>\n                            <label className=\"title-small\" htmlFor=\"date\">Date de sortie</label>\n                            <input\n                                type=\"text\"\n                                id=\"date\"\n                                name=\"release_date\"\n                                placeholder=\"12-12-2021\"\n                                onChange={handleChange}\n                                value={inputs.release_date}\n                            />\n                        </div>\n                    </section>\n                )}\n\n                {/* second step */}\n                {formStep >= 1 && (\n                    <section className={formStep === 1 ? \"block\" : \"hidden\"}>\n                        <h2 className=\"title-medium\">Personnaliser l'ajout</h2>\n                        {/* categories */}\n                        <div>\n                            <label className=\"title-small form__checkbox\" key=\"key\" htmlFor=\"categories\">Catégories</label>\n                            {inputs &&\n                                inputs.categories.map((categorie, id) => (\n                                    <label key={id}>\n                                        <input\n                                            name=\"categories\"\n                                            type=\"checkbox\"\n                                            value={categorie}\n                                            defaultChecked={checked}\n                                            onChange={() => setChecked(!checked)}\n                                            />\n                                        {categorie}\n                                    </label>\n                                ))}\n\n                        </div>\n\n                        {/* description */}\n                        <div>\n                            <label className=\"title-small\" htmlFor=\"description\">Description</label>\n                            <textarea\n                                type=\"textarea\"\n                                id=\"description\"\n                                name=\"description\"\n                                onChange={handleChange}\n                                value={inputs.description}\n                            >\n                            </textarea>\n                        </div>\n\n                        {/* poster */}\n                        <div>\n                            <label className=\"title-small\" htmlFor=\"poster\">Affiche (url)</label>\n                            <input\n                                type=\"url\"\n                                name=\"poster\"\n                                id=\"poster\"\n                                placeholder=\"https://example.com\"\n                                pattern=\"https://.*\"\n                                onChange={handleChange}\n                                value={inputs.poster}\n                            />\n                        </div>\n\n                        {/* backdrop */}\n                        <div>\n                            <label className=\"title-small\" htmlFor=\"backdrop\">Bannière de fond (url)</label>\n                            <input\n                                type=\"url\"\n                                name=\"backdrop\"\n                                id=\"backdrop\"\n                                placeholder=\"https://example.com\"\n                                pattern=\"https://.*\"\n                                size=\"30\"\n                                onChange={handleChange}\n                                value={inputs.backdrop}\n                            />\n                        </div>\n\n                        {/* actors */}\n                            <div>\n                                <label className=\"title-small\" htmlFor=\"actors\">Acteur·ice·s</label>\n                                {inputs.actors && inputs.actors.length !== 0 && (\n                                    <div className=\"form__actors\">\n                                        {inputs.actors.map((actors, index) =>\n                                            <div key={index}>\n                                                <img src={actors.photo} alt={`${actors.name}`} />\n                                                <h3>{actors.name}</h3>\n                                                <h3>{actors.character}</h3>\n                                                <button type=\"button\" onClick={() => {\n                                                    setInputs({\n                                                        ...inputs,\n                                                        actors: inputs.actors.filter(actor => actor.name !== actors.name)\n                                                    })\n                                                }}>\n                                                    Delete\n                                                </button>\n                                            </div>\n                                        )}\n                                    </div>\n                                )}\n\n                            </div>\n\n                        {/* similar movies */}\n                            <div>\n                                <label className=\"title-small\" htmlFor=\"similar\">Films du même genre</label>\n                                {inputs.similar_movies && inputs.similar_movies.length !== 0 && (\n                                    <div className=\"form__actors\">\n                                        {inputs.similar_movies.map((movies, index) =>\n                                            <div key={index}>\n\n                                                <img src={movies.poster} alt={`${movies.title}`} width={100} />\n                                                <h3>{movies.title}</h3>\n                                                <h3>{movies.release_date}</h3>\n\n                                                <button type=\"button\" onClick={() => {\n                                                    setInputs({\n                                                        ...inputs,\n                                                        similar_movies: inputs.similar_movies.filter(movie => movie.title !== movies.title)\n                                                    })\n                                                }}>\n                                                    Delete\n                                                </button>\n                                            </div>\n                                        )}\n                                    </div>\n                                )}\n\n                            </div>\n                    </section>\n                )}\n\n                {/* third step */}\n                {formStep === 2 ? (\n                    <section>\n                        <div className=\"form__success\">\n                        <p>Bien joué !</p>\n                        <p>Le film a été ajouté/modifié avec succès.</p>\n                        {newMovieButton()}\n                        {backToHome()}</div>\n\n                    </section>\n                )\n                    : <button className=\"submit-button\" type=\"submit\"> {formStep ? \"Valider\" : \"Rechercher\"}</button>\n                }\n\n            </form>\n        </div>\n    );\n};\n\nexport default Form;","import React, { useState } from 'react';\nimport Form from '../components/Form/Form';\nimport Navbar from '../components/Navbar/Navbar';\nimport MoviesService from '../services/MoviesService';\n\nconst Add = () => {\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    function addMovie(data) {\n        // Envoyer \"data\" vers le serveur POST /movies\n        MoviesService.add(data)\n        .catch((err) => setErrorMessage(err.message));\n    }\n\n    return (\n        <div className=\"pages-background\">\n            <Navbar />\n\n            <h1 className=\"title-large\">\n                <span>Ajouter un</span>\n                <span>film</span>\n            </h1>\n            \n            {errorMessage && <div className='error'>{errorMessage}</div>}\n            <Form onValidation={addMovie} />\n        </div>\n    );\n};\n\nexport default Add;","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport Form from '../components/Form/Form';\nimport Navbar from '../components/Navbar/Navbar';\nimport MoviesService from '../services/MoviesService';\n\nconst Home = () => {\n    const { id } = useParams();\n    const [dataMovie, setDataMovie] = useState();\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    useEffect(() => {\n        MoviesService.fetchMovies(id).then((apiResult) => setDataMovie(apiResult));\n    }, [id]);\n\n    function updateMovie(updatedMovie) {\n        MoviesService.update(updatedMovie, id)\n            .catch((err) => setErrorMessage(err.message));\n    }\n\n\n\n    return (\n        <div className=\"pages-background\">\n            <Navbar />\n            {errorMessage && <div className='error'>{errorMessage}</div>}\n            {dataMovie &&\n                <div className=\"edit-main\">\n                    <h1 className=\"title-large\">\n                        <span>« {dataMovie.title} »</span>\n                        <span>Modifier</span>\n                    </h1>\n\n                    <Form onValidation={updateMovie} movie={dataMovie} />\n                </div>\n            }\n        </div >\n    );\n};\n\nexport default Home;","import React, { useEffect, useState } from 'react';\nimport Navbar from '../../components/Navbar/Navbar';\nimport EditButton from '../../components/Buttons/EditButton';\nimport MoviesService from '../../services/MoviesService';\nimport DeleteButton from '../../components/Buttons/DeleteButton';\nimport { useParams } from 'react-router';\nimport { Swiper, SwiperSlide } from 'swiper/react/swiper-react.js';\nimport SwiperCore, { Autoplay } from 'swiper'\nimport { Navigation, Pagination } from 'swiper';\nimport 'swiper/swiper.scss';\nimport 'swiper/modules/navigation/navigation.scss';\nimport 'swiper/modules/pagination/pagination.scss';\nimport GlobalFunctions from '../../services/GlobalFunctions';\n\nconst Home = () => {\n    const { id } = useParams();\n    SwiperCore.use([Autoplay]);\n\n    const [cardData, setCardData] = useState(null);\n\n    useEffect(() => {\n        if (id) {\n            MoviesService.fetchMovies(id)\n                .then((apiResult) => {\n                    setCardData(apiResult);\n                });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div>\n            {cardData &&\n                <div className=\"details pages-background\">\n                    <div className=\"details-bg\" style={{ backgroundImage: `url(${cardData.backdrop})` }}></div>\n                    <div className=\"details-structure\">\n                        <Navbar />\n                        <div class=\"details-main\">\n                            <h1 className=\"title-large\">{cardData.title}</h1>\n\n                            <div class=\"details-buttons\">\n                                <EditButton key={id} id={id} />\n                                <DeleteButton id={cardData.id} title={cardData.title} />\n                            </div>\n\n                            <div className=\"details__swiper\">\n                                <div className=\"details__swiper--bg2\" style={{ backgroundImage: `url(${cardData.backdrop})` }}></div>\n                                <Swiper\n                                    className=\"details__swiper--content\"\n                                    modules={[Navigation, Pagination]}\n                                    centeredSlides={true}\n                                    pagination={{\n                                        \"clickable\": true\n                                    }}\n                                    navigation={true}\n                                    /* autoplay={{\n                                        delay: 2000,\n                                        disableOnInteraction: false,\n                                        }} */\n                                    slidesPerView={1}\n                                >\n                                    {/* TAB 1: informations */}\n                                    <SwiperSlide>\n                                        <div className=\"details__swiper--flex details__swiper--from-left\">\n                                            <div>\n                                                <img src={cardData.poster} alt=\"Couverture\" />\n                                            </div>\n                                            <div>\n                                                <div className=\"title-medium\">\n                                                    {GlobalFunctions.formatDate(`${cardData.release_date}`)}\n                                                </div>\n                                                <div className=\"title-small\">\n                                                    {cardData.categories.join(\", \")}\n                                                </div>\n                                                <div className=\"details__swiper--description\">\n                                                    {cardData.description}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </SwiperSlide>\n\n                                    {/* TAB 2: actors */}\n                                    <SwiperSlide>\n                                        <div className=\"details__swiper--flex2\">\n                                            {cardData.actors.map((actors, id) => (\n                                                <div>\n                                                    <img src={actors.photo} alt={actors.name} />\n                                                    <span key={id}>{actors.name}</span>\n                                                    <span key={id} class=\"title-small\">{actors.character}</span>\n                                                </div>\n                                            ))\n                                            }\n                                        </div>\n                                    </SwiperSlide>\n\n                                    {/* TAB 3: similar movies */}\n                                    <SwiperSlide>\n                                        <div className=\"details__swiper--similar\">\n                                            <div>\n                                                <div className=\"title-medium\">\n                                                    Films similaires :\n                                                </div>\n\n                                                <div className=\"details__swiper--similar-list\">\n                                                    {cardData.similar_movies.map((movie, id) => (\n                                                        <p key={id}>{movie.title}</p>\n                                                    ))\n                                                    }\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </SwiperSlide>\n                                </Swiper>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default Home;","import React from 'react';\nimport Navbar from '../components/Navbar/Navbar';\n\nconst Error = () => {\n    return (\n        <div className=\"pages-background\">\n            <Navbar />\n            <h1 className=\"title-large\">\n                <span>404</span>\n                <span>Erreur</span>\n            </h1>            \n        </div>\n    );\n};\n\nexport default Error;","import './style/SCSS/App.scss';\nimport Home from './views/Home/Home';\nimport Add from './views/Add';\nimport Edit from './views/Edit';\nimport Details from './views/Details/Details';\nimport Error from './views/Error';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n      <div>\n        <BrowserRouter>\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/add\" element={<Add />} />\n            <Route path=\"/movies/:id\" element={<Details />} />\n            <Route path=\"/edit/:id\" element={<Edit />} />\n            <Route component={Error} />\n          </Routes>\n        </BrowserRouter>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}